#######################################################################################################################################################
###############################     MACROS      #######################################################################################################
#######################################################################################################################################################

########################################
############## Start Print #############
########################################

[gcode_macro START_PRINT]
gcode:
   # _cpufreq_set GOVERNOR=performance
	{% set BED_TEMP=params.BED_TEMP|default(60)|float %}
	{% set EXTRUDER_TEMP=params.EXTRUDER_TEMP|default(130)|float %}
	
	# Home the printer
	G90
	M82
	G28
	
	# Preheat the bed
	M140 S{BED_TEMP}
	M190 S{BED_TEMP}
	M104 S130
	
	# Heatsoak
	G4 P60000
	
	# Z probing sequence
	G28
	Z_TILT_ADJUST
	G28 Z
    BED_MESH_CLEAR
	BED_MESH_CALIBRATE
	#BED_MESH_PROFILE LOAD=default
    CARTOGRAPHER_TOUCH  
	
	# Heat the extruder to the desired temperature
	M104 S{EXTRUDER_TEMP}
	M109 S{EXTRUDER_TEMP}
	
	# Prime line sequence
	G1 Z5 F3000 ; lift
	G1 X20 Y5 F1500 ; move to prime position
	G1 Z0.15 F3000 ; get ready to prime
	G92 E0 ; reset extrusion distance
	G1 X100 E10 F600 ; prime nozzle with adjusted extrusion / E__ based on how much you like
	
	# String removal circle after priming
	G1 Z0.2 F3000 ; adjust to 0.2mm above the bed
	G1 Y15 F10000 ; move the toolhead in the Y direction by 15 units
	
	# Execute the circle 3 times
	G2 I-5 J0 F10000 ; circle with 5mm radius
	G2 I-5 J0 F10000
	G2 I-5 J0 F10000

    SKEW_PROFILE LOAD=calilantern_skew_profile




########################################
############## End Print ###############
########################################

[gcode_macro END_PRINT]
gcode:
   # _cpufreq_set GOVERNOR=ondemand
    SET_SKEW CLEAR=1
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G91
    
    # Retract and wipe out Z
    G1 E-3.75 Z0.2 F2700
    G1 X5 Y5 F3000
    
    # Present print
    G1 Z10 F1500
    G90
    G1 X255 Y250
    
    # Shut things down
    M107 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    M84 X Y E ;Disable motors

    

########################################
############## Pause Print #############
########################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE




#######################################################################################################################################################
###############################     Speed Macro    ####################################################################################################
#######################################################################################################################################################


[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


#######################################################################################################################################################
###############################    Filament Tracking    ###############################################################################################
#######################################################################################################################################################

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}




#######################################################################################################################################################
###############################    Filament Detection     #############################################################################################
#######################################################################################################################################################



#[filament_switch_sensor switch_sensor]
#switch_pin: ^PF0
#pause_on_runout: False
#runout_gcode:
#  PAUSE # [pause_resume] is required in printer.cfg
#  M117 Filament switch runout
#insert_gcode:
#  M117 Filament switch inserted

#[filament_motion_sensor encoder_sensor]
#switch_pin: ^PC15
#detection_length: 2.88
#extruder: extruder
#pause_on_runout: False
#runout_gcode:
#  PAUSE # [pause_resume] is required in printer.cfg
#  M117 Filament encoder runout
#insert_gcode:
#  M117 Filament encoder inserted

#######################################################################################################################################################
###############################    Load Filament     ##################################################################################################
#######################################################################################################################################################

[gcode_macro LOAD_FILAMENT]
description: Load filament with preset temperatures
gcode:
    {% if params.FILAMENT == "PLA" %}
    M104 S200 ; Set PLA temperature
    {% elif params.FILAMENT == "PETG" %}
    M104 S240 ; Set PETG temperature
    {% elif params.FILAMENT == "ASA" %}
    M104 S260 ; Set ASA temperature
    {% else %}
    M117 "Unknown filament type"
    {% endif %}
    M109 R{printer.extruder.target} ; Wait for extruder to reach target temperature
    M83 ; Set extruder to relative mode
    ; Split extrusion into 5x50mm extrudes for a total of 250mm
    G1 E50 F300
    G1 E50 F300
    G1 E50 F300
    G1 E50 F300
    G1 E50 F300
    M117 "Filament Loaded"


#######################################################################################################################################################
###############################    Unload Filament     ################################################################################################
#######################################################################################################################################################

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament with preset temperatures
gcode:
    {% if params.FILAMENT == "PLA" %}
    M104 S200 ; Set PLA temperature
    {% elif params.FILAMENT == "PETG" %}
    M104 S240 ; Set PETG temperature
    {% elif params.FILAMENT == "ASA" %}
    M104 S260 ; Set ASA temperature
    {% else %}
    M117 "Unknown filament type"
    {% endif %}
    M109 R{printer.extruder.target} ; Wait for extruder to reach target temperature
    M83 ; Set extruder to relative mode
    ; Split retraction into 3x50mm retracts for a total of 150mm
    G1 E-50 F300
    G1 E-50 F300
    G1 E-50 F300
    M117 "Filament Unloaded"



#######################################################################################################################################################
###############################    CPU Frequency Control     #############################################################################################
#######################################################################################################################################################


[gcode_shell_command cpufreq_set]
command: sh -c "sudo /usr/bin/cpufreq-set -g $0"
timeout: 5.0
verbose: True

[gcode_macro _cpufreq_set]
description: set cpu governor
gcode:
  {% set governor = params.GOVERNOR|default("performance") %}
  RESPOND MSG='{"CPU set to %s" % (governor)}'
  RUN_SHELL_COMMAND CMD=cpufreq_set PARAMS={governor}